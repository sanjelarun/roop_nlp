"result = 0\nfor city in cities:\n\tfor population in populations:\n\t\tif city != population:\n\t\t\tresult += len(city) + population\nresult = result", ['filter()', 'join()', 'reduce()']
"result = []\nfor item in items:\n\tif item.isActive:\n\t\tresult.append(item.property)\nresult = sum(result)", ['filter()', 'map()', 'sum()']
"result = []\nfor a in as:\n\tfor b in bs:\n\t\tif a % 2 == b:\n\t\t\tresult.append(a * 2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"count = 0\nfor list in lists:\n\tfor str in list:\n\t\tcount += 1", ['flatMap()', 'count()']
"result = 0\nfor val in data:\n\tresult += val * 5", ['map()', 'reduce()']
"count = 0\nfor num in numbers:\n\tcount += 1", ['count()']
"result = 0\nfor entity in entities:\n\tresult = func(result, entity)", ['reduce()']
"result = []\nfor id in ids:\n\tfor data in datas:\n\t\tresult.append((id, data.lower()))\nresult = sum([len(str(item)) for item in result])", ['map()', 'join()', 'sum()']
"sum_val = 0\nfor item in items:\n\tsum_val += item.value", ['reduce()']
"result = sorted(words)", ['sortBy()']
"result = 0\nfor list in lists:\n\tfor str in list:\n\t\tresult += len(str)", ['flatMap()', 'sum()']
"result = []\nfor num in numbers:\n\tresult.append(num)\nresult = list(set(result))\nresult.sort()", ['map()', 'distinct()', 'sortBy()']
"result = []\nfor text in texts:\n\tfor text1 in texts1:\n\t\tif 'b' in text and 'c' not in text1:\n\t\t\tresult.append(text.upper())\nresult = ''.join(result)", ['join()', 'filter()', 'map()', 'join()']
"result = 0\nfor x in xs:\n\tfor y in ys:\n\t\tif x != y:\n\t\t\tresult += x * y\nresult = result", ['filter()', 'join()', 'reduce()']
"result = 0\nfor num in numbers:\n\tif num > 10:\n\t\tresult += num", ['filter()', 'sum()']
"result = []\nfor city in cities:\n\tfor population in populations:\n\t\tresult.append((city, population * 2))\nresult = reduce(lambda a, b: a+b, [pop for city, pop in result])", ['map()', 'join()', 'reduce()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tresult.append((name, age + 1))\nresult = len(result)", ['map()', 'join()', 'count()']
"product = 1\nfor val in values:\n\tproduct *= val", ['reduce()']
"result = 0\nfor num in numbers:\n\tresult += num", ['sum()']
"result = []\nfor a in as:\n\tfor b in bs:\n\t\tif a % 2 == b:\n\t\t\tresult.append(a * 2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"result = []\nfor obj in objects:\n\tfor obj1 in objects1:\n\t\tif obj.isValid and not obj1.isValid:\n\t\t\tresult.append(func(obj))\nresult = reduce(lambda a, b: a*b, result)", ['join()', 'filter()', 'map()', 'reduce()']
"result = []\nfor x in xs:\n\tresult.append(x3)", ['map()']
"result = 0\nfor num in numbers:\n\tresult += num\nresult = [result for _ in range(5)]\nresult = len(result)", ['reduce()', 'flatMap()', 'count()']
"result = []\nfor item in items:\n\tfor item1 in items1:\n\t\tif item.isActive and item1.isActive:\n\t\t\tresult.append(item.property)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"result = []\nfor list in lists:\n\tfor num in list:\n\t\tresult.append(num)", ['flatMap()']
"result = 0\nfor list in lists:\n\tfor num in list:\n\t\tresult += num", ['flatMap()', 'sum()']
"result = []\nfor num in numbers:\n\tresult.append(num * 2)\nresult = result[:5]", ['map()', 'take()']
"result = []\nfor id in ids:\n\tfor data in datas:\n\t\tresult.append((id, data.lower()))\nresult = reduce(lambda a, b: a+b, [len(str(item)) for item in result])", ['join()', 'map()', 'reduce()']
"result = []\nfor key in keys:\n\tfor val in values:\n\t\tresult.append((key, val))", ['join()']
"result = 0\nfor list in lists:\n\tfor str in list:\n\t\tresult += len(str)", ['flatMap()', 'sum()']
"result = []\nfor num in numbers:\n\tif num > 5:\n\t\tresult.append(num)\nresult = len(result)", ['filter()', 'count()']
"result = sorted(strings, key=len)", ['sortBy()']
"result = []\nfor entity in entities:\n\tfor entity1 in entities1:\n\t\tif entity.isActive and not entity1.isActive:\n\t\t\tresult.append(entity.property)\nresult = len(result)", ['join()', 'filter()', 'map()', 'count()']
"result = 0\nfor key in keys:\n\tfor val in values:\n\t\tresult += key * func(val)\nresult = result", ['join()', 'map()', 'reduce()']
"result = []\nfor num in numbers:\n\tresult.append(num * 2)\nresult = sorted(result)\nresult = [item for item in result if item in dict1]", ['map()', 'sortBy()', 'join()']
"result = 0\nfor obj in objs:\n\tresult = func(result, obj)", ['reduce()']
"count = 0\nfor obj in objects:\n\tif obj.isActive:\n\t\tcount += 1", ['filter()', 'count()']
"result = []\nfor obj in objects:\n\tfor obj1 in objects1:\n\t\tif obj.isValid and not obj1.isValid:\n\t\t\tresult.append(func(obj))\nresult = reduce(lambda a, b: a*b, result)", ['join()', 'filter()', 'map()', 'reduce()']
"result = []\nfor key in keys:\n\tfor val in values:\n\t\tresult.append((key, val))\nresult = len(result)", ['join()', 'count()']
"result = []\nfor list in lists:\n\tfor element in list:\n\t\tresult.append(element)\nresult.sort()", ['flatMap()', 'sortBy()']
"result = []\nfor z in zs:\n\tfor t in ts:\n\t\tif z < t:\n\t\t\tresult.append(z**2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"result = []\nfor num in numbers:\n\tif num > 10:\n\t\tresult.append(num)\nresult.sort()", ['filter()', 'sortBy()']
"result = []\nfor obj in objects:\n\tfor obj1 in objects1:\n\t\tif obj.isValid and obj1.isValid:\n\t\t\tresult.append(func(obj))\nresult = len(result)", ['join()', 'filter()', 'map()', 'count()']
"result = []\nfor char in chars:\n\tresult.append(char.upper())", ['map()']
"result = []\nfor key in keys:\n\tfor val in values:\n\t\tresult.append((key, func(val)))\nresult = sum([val for key, val in result]", ['join()', 'map()', 'sum()']
"result = []\nfor id in ids:\n\tfor data in datas:\n\t\tif id != data:\n\t\t\tresult.append((id, data))\nresult = len(result)", ['filter()', 'join()', 'count()']
"result = []\nfor city in cities:\n\tfor population in populations:\n\t\tif city != population:\n\t\t\tresult.append((city, population))\nresult = reduce(lambda a, b: a+b, [len(str(item)) for item in result])", ['filter()', 'join()', 'map()', 'reduce()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tresult.append((name, age + 1))\nresult = ''.join([str(item) for item in result])", ['join()', 'map()', 'join()']
"count = 0\nfor val in values:\n\tcount += 1", ['count()']
"result = 0\nfor x in xs:\n\tfor y in ys:\n\t\tresult += x * y2\nresult = result", ['join()', 'map()', 'reduce()']
"result = []\nfor city in cities:\n\tfor population in populations:\n\t\tif city != population:\n\t\t\tresult.append((city, population * 2))\nresult = reduce(lambda a, b: a+b, [pop for city, pop in result])", ['filter()', 'join()', 'map()', 'reduce()']
"result = []\nfor list in lists:\n\tfor obj in list:\n\t\tif obj.isActive:\n\t\t\tresult.append(obj.property)", ['flatMap()', 'filter()']
"result = []\nfor item in items:\n\tif item.isActive:\n\t\tresult.append(item.property)\nresult = sum(result)", ['filter()', 'map()', 'sum()']
"result = []\nfor obj in objs:\n\tresult.append(transform(obj))", ['map()']
"result = []\nfor num in numbers1:\n\tresult.append(num)\nfor num in numbers2:\n\tresult.append(num)\nresult = len(result)", ['union()', 'count()']
"result = []\nfor num in numbers:\n\tif num % 2 == 0:\n\t\tresult.append(num)\nresult = len(result)", ['filter()', 'count()']
"result = []\nfor list in lists:\n\tfor obj in list:\n\t\tresult.append(obj.property)", ['flatMap()']
"intermediate = []\nfor person in people:\n\tif person['age'] > 20:\n\t\tintermediate.append(person)\nresult = ''\nfor person in intermediate:\n\tresult += person['name']", ['filter()', 'reduce()']
"count = 0\nfor obj in objects:\n\tcount += 1", ['count()']
"result = []\nfor x in xs:\n\tfor y in ys:\n\t\tresult.append((x, y))", ['join()']
"result = 0\nfor city in cities:\n\tfor population in populations:\n\t\tif city != population:\n\t\t\tresult += len(city) + population\nresult = result", ['filter()', 'join()', 'reduce()']
"result = []\nfor key, val in dict1.items():\n\tif key in dict2.keys():\n\t\tresult.append((key, (val, dict2[key])))\nresult.sort()\nresult = result[:5]\nresult = len(result)", ['join()', 'sortBy()', 'take()', 'count()']
"result = []\nfor entity in entities:\n\tfor entity1 in entities1:\n\t\tif entity.isActive and entity1.isNotActive:\n\t\t\tresult.append(entity.property)\nresult = len(result)", ['join()', 'filter()', 'map()', 'count()']
"result = []\nfor y in ys:\n\tif y != 0:\n\t\tresult.append(y4)", ['map()', 'filter()']
"result = []\nfor id in ids:\n\tfor data in datas:\n\t\tresult.append((id, data.lower()))\nresult = sum([len(str(item)) for item in result])", ['map()', 'join()', 'sum()']
"result = 0\nfor str in strings:\n\tif 'a' in str:\n\t\tresult += len(str)", ['filter()', 'sum()']
"result = []\nfor entity in entities:\n\tresult.append(entity.property)", ['map()']
"result = []\nfor a in as:\n\tfor b in bs:\n\t\tif a % 2 > b:\n\t\t\tresult.append(a * 2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"result = []\nfor element in list:\n\tif element.startswith('a'):\n\t\tresult.append(element)\nresult = list(set(result))", ['filter()', 'distinct()']
"result = []\nfor entity in entities:\n\tfor entity1 in entities1:\n\t\tif not entity.isActive and entity1.isNotActive:\n\t\t\tresult.append(entity.property)\nresult = len(result)", ['join()', 'filter()', 'map()', 'count()']
"result = 0\nfor num in numbers:\n\tresult += num\nresult = [result]", ['reduce()', 'collect()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tresult.append((name, age))\nresult = ''.join([str(item) for item in result])", ['join()', 'map()']
"accum = 0\nfor val in vals:\n\taccum += val", ['reduce()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tif name != age:\n\t\t\tresult.append((name, age))", ['filter()', 'join()']
"result = []\nfor id in ids:\n\tfor data in datas:\n\t\tif id != data:\n\t\t\tresult.append((id, data.lower()))\nresult = sum([len(str(item)) for item in result]", ['filter()', 'join()', 'map()', 'sum()']
"result = []\nfor key in keys:\n\tfor val in values:\n\t\tif key == val:\n\t\t\tresult.append((key, func(val)))\nresult = sum([val for key, val in result]", ['filter()', 'join()', 'map()', 'sum()']
"result = 0\nfor entity in entities:\n\tresult = func(result, entity)", ['reduce()']
"result = []\nfor num in numbers:\n\tresult.append(num * 5)\nresult.sort(reverse=True)", ['map()', 'sortBy()']
"result = []\nfor city in cities:\n\tfor population in populations:\n\t\tresult.append((city, population))\nresult = sum([pop for city, pop in result])", ['join()', 'map()', 'sum()']
"result = 0\nfor id in ids:\n\tfor data in datas:\n\t\tresult += id + len(data.lower())\nresult = result", ['join()', 'map()', 'reduce()']
"result = []\nfor city in cities:\n\tfor population in populations:\n\t\tresult.append((city, population))\nresult = sum([pop for city, pop in result])", ['join()', 'map()', 'sum()']
"result = []\nfor num in numbers:\n\tif num > 0:\n\t\tresult.append(num)\nresult = result[:5]", ['filter()', 'take()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tif name != age:\n\t\t\tresult.append((name, age))\nresult = sum([age for name, age in result]", ['filter()', 'join()', 'map()', 'sum()']
"result = []\nfor num in numbers:\n\tresult.append(num)\nresult.sort(reverse=True)", ['map()', 'sortBy()']
"result = []\nfor z in zs:\n\tfor t in ts:\n\t\tif z > 0 and t > 0:\n\t\t\tresult.append(z2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"result = []\nfor obj in objects:\n\tfor obj1 in objects1:\n\t\tif not obj.isValid and obj1.isValid:\n\t\t\tresult.append(func(obj))\nresult = reduce(lambda a, b: ab, result)", ['join()', 'filter()', 'map()', 'reduce()']
"result = []\nfor z in zs:\n\tfor t in ts:\n\t\tif z > t:\n\t\t\tresult.append(z**2)\nresult = sum(result)", ['join()', 'filter()', 'map()', 'sum()']
"count = 0\nfor num in numbers:\n\tif num > 10:\n\t\tcount += 1", ['filter()', 'count()']
"result = []\nfor obj in objs:\n\tresult.append(transform(obj))", ['map()']
"result = []\nfor obj in objects:\n\tfor obj1 in objects1:\n\t\tif not obj.isValid and obj1.isValid:\n\t\t\tresult.append(func(obj))\nresult = reduce(lambda a, b: ab, result)", ['join()', 'filter()', 'map()', 'reduce()']
"result = []\nfor sublist in list_of_lists:\n\tfor item in sublist:\n\t\tresult.append(item)\nresult = list(set(result))\nresult = [item for item in result if item in dict1]", ['flatMap()', 'distinct()', 'join()']
"result = 0\nfor list in lists:\n\tfor num in list:\n\t\tresult += num", ['flatMap()', 'sum()']
"result = 0\nfor id in ids:\n\tfor data in datas:\n\t\tif id != data:\n\t\t\tresult += id + len(data)\nresult = result", ['filter()', 'join()', 'reduce()']
"result = 0\nfor item in iterable:\n\tresult += item.value", ['sum()']
"count = 0\nfor str in strings:\n\tcount += 1", ['count()']
"count = 0\nfor str in strings:\n\tcount += 1", ['count()']
"result = []\nfor val in data:\n\tif val > 20:\n\t\tresult.append(val * 5)", ['map()', 'filter()']
"result = []\nfor num in numbers:\n\tresult.append(num)\nresult = list(set(result))\nresult.sort()\nresult = sum(result)", ['map()', 'distinct()', 'sortBy()', 'sum()']
"result = []\nfor element in list:\n\tresult.append(element)\nresult.sort()\nresult = result[:5]", ['map()', 'take()']
"result = []\nfor name in names:\n\tfor age in ages:\n\t\tresult.append((name, age + 1))", ['map()', 'join()']
